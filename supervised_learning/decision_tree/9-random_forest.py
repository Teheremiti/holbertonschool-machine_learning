#!/usr/bin/env python3
""" Random_Forest class """
import numpy as np
Decision_Tree = __import__("8-build_decision_tree").Decision_Tree


class Random_Forest():
    """
    Defines a Random Forest ensemble of decision trees.

    Attributes:
        numpy_predicts (list): List to store predictions from individual trees.
        target (numpy.ndarray): The target variable.
        numpy_preds (np.ndarray): Predictions generated by the Random Forest.
        n_trees (int): The number of decision trees in the ensemble.
        max_depth (int): The maximum depth of each decision tree.
        min_pop (int): The minimum number of samples required to split a node.
        seed (int): The seed value for random number generation.
    """

    def __init__(self, n_trees=100, max_depth=10, min_pop=1, seed=0):
        """ Constructor method for a Random_Forest instance. """
        self.numpy_predicts = []
        self.target = None
        self.numpy_preds = None
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_pop = min_pop
        self.seed = seed

    def predict(self, explanatory):
        """
        Generates predictions for a given set of explanatory variables.

        Args:
            explanatory (numpy.ndarray): The explanatory variables.

        Returns:
            numpy.ndarray: Predictions generated by the Random Forest ensemble.
        """
        predictions = np.array([tree_predict(explanatory)
                               for tree_predict in self.numpy_preds])

        mode = np.apply_along_axis(
            lambda x: np.bincount(x).argmax(),
            axis=0,
            arr=predictions)

        return mode

    def fit(self, explanatory, target, n_trees=100, verbose=0):
        """
        Fits the Random Forest model to the training data.

        Args:
            explanatory(numpy.ndarray): The explanatory variables.
            target(numpy.ndarray): The target variable.
            n_trees(int, optional): The number of decision trees in the
                ensemble. Defaults to 100.
            verbose(int, optional): Verbosity mode(0 or 1). Defaults to 0.
        """
        self.target = target
        self.explanatory = explanatory
        self.numpy_preds = []
        depths = []
        nodes = []
        leaves = []
        accuracies = []
        for i in range(n_trees):
            T = Decision_Tree(max_depth=self.max_depth,
                              min_pop=self.min_pop, seed=self.seed+i)
            T.fit(explanatory, target)
            self.numpy_preds.append(T.predict)
            depths.append(T.depth())
            nodes.append(T.count_nodes())
            leaves.append(T.count_nodes(only_leaves=True))
            accuracies.append(T.accuracy(T.explanatory, T.target))
        if verbose == 1:
            print(f"""  Training finished.
    - Mean depth                     : {np.array(depths).mean()}
    - Mean number of nodes           : {np.array(nodes).mean()}
    - Mean number of leaves          : {np.array(leaves).mean()}
    - Mean accuracy on training data : {np.array(accuracies).mean()}
    - Accuracy of the forest on td   : {self.accuracy(self.explanatory,
                                                      self.target)}""")

    def accuracy(self, test_explanatory, test_target):
        """
        Computes the accuracy of the Random Forest model on test data.

        Args:
            test_explanatory (np.ndarray): The explanatory variables of the td.
            test_target (np.ndarray): The target variable of the test data.

        Returns:
            float: The accuracy of the Random Forest model on the test data.
        """
        return np.sum(
            np.equal(
                self.predict(test_explanatory), test_target))/test_target.size
